{"ast":null,"code":"import _objectSpread from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/javi/Documents/ironhack/proyectoFinal/client/src/components/contents/Chart.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2'; // import { threadId } from 'worker_threads';\n\nvar legend = {\n  labels: {\n    fontColor: \"#000000\",\n    fontSize: 200\n  },\n  maintainAspectRatio: true\n};\nvar options = {\n  scales: {\n    xAxes: [{\n      ticks: {\n        autoSkip: false,\n        fontSize: 40\n      }\n    }],\n    yAxes: [{\n      ticks: {\n        autoSkip: false,\n        fontSize: 40,\n        padding: 10\n      }\n    }]\n  }\n};\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {\n      weight: _this.props.weight\n    };\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState(_objectSpread({}, this.state, {\n        weight: nextProps.weight\n      }));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.graphicUpdate();\n    }\n  }, {\n    key: \"graphicUpdate\",\n    value: function graphicUpdate() {\n      var data = {\n        labels: [],\n        datasets: [{\n          label: \"Weight\",\n          fill: true,\n          lineTension: 0.3,\n          backgroundColor: \"rgba(51, 109, 233,0.4)\",\n          borderColor: \"rgba(51,109,233,1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          // legend.labels.fontSize:20,\n          // legend: {\n          //     display: false,\n          //     labels: {\n          //         fontColor: \"#00ff00\",\n          //         fontSize: 200\n          //     }\n          data: []\n        }]\n      };\n      if (!!this.state.weight) this.state.weight.map(function (weight) {\n        return data.labels.push(weight.date), data.datasets[0].data.push(weight.weight);\n      });\n      return data;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Line, {\n        data: function data() {\n          return _this2.graphicUpdate();\n        },\n        legend: legend,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport { Chart as default };","map":{"version":3,"sources":["/Users/javi/Documents/ironhack/proyectoFinal/client/src/components/contents/Chart.js"],"names":["React","Component","Line","legend","labels","fontColor","fontSize","maintainAspectRatio","options","scales","xAxes","ticks","autoSkip","yAxes","padding","Chart","props","state","weight","nextProps","setState","graphicUpdate","data","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","map","push","date"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,iBAArB,C,CACA;;AAEA,IAAIC,MAAM,GAAC;AACPC,EAAAA,MAAM,EAAE;AACJC,IAAAA,SAAS,EAAE,SADP;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GADD;AAKPC,EAAAA,mBAAmB,EAAE;AALd,CAAX;AAQA,IAAIC,OAAO,GAAC;AACRC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE,KAAZ;AAAmBN,QAAAA,QAAQ,EAAE;AAA7B;AAAT,KAAD,CAAT;AAAyDO,IAAAA,KAAK,EAAE,CAAC;AAAEF,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE,KAAZ;AAAmBN,QAAAA,QAAQ,EAAE,EAA7B;AAAgCQ,QAAAA,OAAO,EAAC;AAAxC;AAAT,KAAD;AAAhE;AADA,CAAZ;;IAKqBC,K;;;;;AACjB,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,MAAKF,KAAL,CAAWE;AADV,KAAb;AAFe;AAKlB;;;;8CAEyBC,S,EAAW;AACjC,WAAKC,QAAL,mBAAmB,KAAKH,KAAxB;AAA+BC,QAAAA,MAAM,EAAEC,SAAS,CAACD;AAAjD;AACH;;;yCAEoB;AACjB,WAAKG,aAAL;AACH;;;oCAEe;AACZ,UAAIC,IAAI,GAAG;AACPlB,QAAAA,MAAM,EAAE,EADD;AAEPmB,QAAAA,QAAQ,EAAE,CACN;AACIC,UAAAA,KAAK,EAAE,QADX;AAEIC,UAAAA,IAAI,EAAE,IAFV;AAGIC,UAAAA,WAAW,EAAE,GAHjB;AAIIC,UAAAA,eAAe,EAAE,wBAJrB;AAKIC,UAAAA,WAAW,EAAE,oBALjB;AAMIC,UAAAA,cAAc,EAAE,MANpB;AAOIC,UAAAA,UAAU,EAAE,EAPhB;AAQIC,UAAAA,gBAAgB,EAAE,GARtB;AASIC,UAAAA,eAAe,EAAE,OATrB;AAUIC,UAAAA,gBAAgB,EAAE,oBAVtB;AAWIC,UAAAA,oBAAoB,EAAE,MAX1B;AAYIC,UAAAA,gBAAgB,EAAE,CAZtB;AAaIC,UAAAA,gBAAgB,EAAE,CAbtB;AAcIC,UAAAA,yBAAyB,EAAE,oBAd/B;AAeIC,UAAAA,qBAAqB,EAAE,qBAf3B;AAgBIC,UAAAA,qBAAqB,EAAE,CAhB3B;AAiBIC,UAAAA,WAAW,EAAE,CAjBjB;AAkBIC,UAAAA,cAAc,EAAE,EAlBpB;AAmBI;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,UAAAA,IAAI,EAAE;AA1BV,SADM;AAFH,OAAX;AAiCA,UAAI,CAAC,CAAC,KAAKL,KAAL,CAAWC,MAAjB,EAAyB,KAAKD,KAAL,CAAWC,MAAX,CAAkBwB,GAAlB,CAAsB,UAAAxB,MAAM;AAAA,eAAKI,IAAI,CAAClB,MAAL,CAAYuC,IAAZ,CAAiBzB,MAAM,CAAC0B,IAAxB,GAA+BtB,IAAI,CAACC,QAAL,CAAc,CAAd,EAAiBD,IAAjB,CAAsBqB,IAAtB,CAA2BzB,MAAM,CAACA,MAAlC,CAApC;AAAA,OAA5B;AACzB,aAAOI,IAAP;AACH;;;6BAIQ;AAAA;;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAA,iBAAM,MAAI,CAACD,aAAL,EAAN;AAAA,SAAZ;AAAwC,QAAA,MAAM,EAAElB,MAAhD;AAAwD,QAAA,OAAO,EAAEK,OAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;;;;EA5D8BP,S;;SAAdc,K","sourcesContent":["import React, { Component } from 'react'\nimport { Line } from 'react-chartjs-2';\n// import { threadId } from 'worker_threads';\n\nlet legend={\n    labels: {\n        fontColor: \"#000000\",\n        fontSize: 200,\n    },\n    maintainAspectRatio: true\n}\n\nlet options={\n    scales: { xAxes: [{ ticks: { autoSkip: false, fontSize: 40 } }], yAxes: [{ ticks: { autoSkip: false, fontSize: 40,padding:10 } }] },\n}\n\n\nexport default class Chart extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            weight: this.props.weight\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ ...this.state, weight: nextProps.weight })\n    }\n\n    componentDidUpdate() {\n        this.graphicUpdate()\n    }\n\n    graphicUpdate() {\n        let data = {\n            labels: [],\n            datasets: [\n                {\n                    label: \"Weight\",\n                    fill: true,\n                    lineTension: 0.3,\n                    backgroundColor: \"rgba(51, 109, 233,0.4)\",\n                    borderColor: \"rgba(51,109,233,1)\",\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"rgba(75,192,192,1)\",\n                    pointBackgroundColor: \"#fff\",\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n                    pointHoverBorderColor: \"rgba(220,220,220,1)\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    // legend.labels.fontSize:20,\n                    // legend: {\n                    //     display: false,\n                    //     labels: {\n                    //         fontColor: \"#00ff00\",\n                    //         fontSize: 200\n                    //     }\n                    data: []\n                }\n            ],\n        };\n        if (!!this.state.weight) this.state.weight.map(weight => (data.labels.push(weight.date), data.datasets[0].data.push(weight.weight)))\n        return data\n    }\n\n\n\n    render() {\n        return (\n            <Line data={() => this.graphicUpdate()} legend={legend} options={options} />\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}