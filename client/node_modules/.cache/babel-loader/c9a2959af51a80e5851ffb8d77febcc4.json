{"ast":null,"code":"import _defineProperty from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/javi/Documents/ironhack/proyectoFinal/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/javi/Documents/ironhack/proyectoFinal/client/src/components/auth/Signup.js\";\n// auth/Signup.js\nimport React, { Component } from 'react';\nimport AuthService from './AuthService'; //signup y login son iguales a excepción de el html renderizado y el endpoint de nuestra API rest a la que llamamos\n//uno llama a /signup y el otro a /login usando nuestro AuthService\n\nvar Signup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Signup, _Component);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Signup).call(this, props));\n\n    _this.handleFormSubmit = function (event) {\n      event.preventDefault();\n      var username = _this.state.username;\n      var password = _this.state.password; //aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n\n      _this.service.signup(username, password).then(function (response) {\n        _this.setState({\n          username: \"\",\n          password: \"\"\n        }); //aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n        //por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n        //y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n\n\n        _this.props.getUser(response.user);\n      }).catch(function (error) {\n        _this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      });\n    };\n\n    _this.handleChange = function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.state = {\n      username: '',\n      password: ''\n    };\n    _this.service = new AuthService();\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"auth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Signup\"), React.createElement(\"form\", {\n        onSubmit: this.handleFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        placeholder: \"Username\",\n        type: \"text\",\n        name: \"username\",\n        value: this.state.username,\n        onChange: function onChange(e) {\n          return _this2.handleChange(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        placeholder: \"Password\",\n        type: \"password\",\n        name: \"password\",\n        value: this.state.password,\n        onChange: function onChange(e) {\n          return _this2.handleChange(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Sign up\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      })), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.state.error ? 'Error' : ''));\n    }\n  }]);\n\n  return Signup;\n}(Component);\n\nexport default Signup;","map":{"version":3,"sources":["/Users/javi/Documents/ironhack/proyectoFinal/client/src/components/auth/Signup.js"],"names":["React","Component","AuthService","Signup","props","handleFormSubmit","event","preventDefault","username","state","password","service","signup","then","response","setState","getUser","user","catch","error","handleChange","target","name","value","e"],"mappings":";;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;AACA;;IACMC,M;;;;;AACJ,kBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,gFAAMA,KAAN;;AADgB,UAMlBC,gBANkB,GAMC,UAACC,KAAD,EAAW;AAC5BA,MAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,QAAQ,GAAG,MAAKC,KAAL,CAAWD,QAA5B;AACA,UAAME,QAAQ,GAAG,MAAKD,KAAL,CAAWC,QAA5B,CAH4B,CAK5B;;AACA,YAAKC,OAAL,CAAaC,MAAb,CAAoBJ,QAApB,EAA8BE,QAA9B,EACCG,IADD,CACO,UAAAC,QAAQ,EAAI;AACf,cAAKC,QAAL,CAAc;AACVP,UAAAA,QAAQ,EAAE,EADA;AAEVE,UAAAA,QAAQ,EAAE;AAFA,SAAd,EADe,CAKf;AACA;AACA;;;AACA,cAAKN,KAAL,CAAWY,OAAX,CAAmBF,QAAQ,CAACG,IAA5B;AACH,OAVD,EAWCC,KAXD,CAWO,UAAAC,KAAK,EAAI;AACd,cAAKJ,QAAL,CAAc;AACZP,UAAAA,QAAQ,EAAEA,QADE;AAEZE,UAAAA,QAAQ,EAAEA,QAFE;AAGZS,UAAAA,KAAK,EAAE;AAHK,SAAd;AAKD,OAjBD;AAkBD,KA9BiB;;AAAA,UAgClBC,YAhCkB,GAgCH,UAACd,KAAD,EAAW;AAAA,0BACFA,KAAK,CAACe,MADJ;AAAA,UACjBC,IADiB,iBACjBA,IADiB;AAAA,UACXC,KADW,iBACXA,KADW;;AAExB,YAAKR,QAAL,qBAAgBO,IAAhB,EAAuBC,KAAvB;AACD,KAnCiB;;AAEhB,UAAKd,KAAL,GAAa;AAAED,MAAAA,QAAQ,EAAE,EAAZ;AAAgBE,MAAAA,QAAQ,EAAE;AAA1B,KAAb;AACA,UAAKC,OAAL,GAAe,IAAIT,WAAJ,EAAf;AAHgB;AAIjB;;;;6BAkCQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAGE;AAAM,QAAA,QAAQ,EAAE,KAAKG,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,WAAW,EAAC,UAAnB;AAA8B,QAAA,IAAI,EAAC,MAAnC;AAA0C,QAAA,IAAI,EAAC,UAA/C;AAA0D,QAAA,KAAK,EAAE,KAAKI,KAAL,CAAWD,QAA5E;AAAsF,QAAA,QAAQ,EAAG,kBAAAgB,CAAC;AAAA,iBAAI,MAAI,CAACJ,YAAL,CAAkBI,CAAlB,CAAJ;AAAA,SAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAGI;AAAO,QAAA,WAAW,EAAC,UAAnB;AAA8B,QAAA,IAAI,EAAC,UAAnC;AAA8C,QAAA,IAAI,EAAC,UAAnD;AAA8D,QAAA,KAAK,EAAE,KAAKf,KAAL,CAAWC,QAAhF;AAA0F,QAAA,QAAQ,EAAG,kBAAAc,CAAC;AAAA,iBAAI,MAAI,CAACJ,YAAL,CAAkBI,CAAlB,CAAJ;AAAA,SAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAKE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CAHF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKf,KAAL,CAAWU,KAAX,GAAmB,OAAnB,GAA6B,EAAlC,CAXF,CADF;AAeD;;;;EAvDkBlB,S;;AA0DrB,eAAeE,MAAf","sourcesContent":["// auth/Signup.js\nimport React, { Component } from 'react';\nimport AuthService from './AuthService'\n\n//signup y login son iguales a excepción de el html renderizado y el endpoint de nuestra API rest a la que llamamos\n//uno llama a /signup y el otro a /login usando nuestro AuthService\nclass Signup extends Component {\n  constructor(props){\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n    \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    //aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n    this.service.signup(username, password)\n    .then( response => {\n        this.setState({\n            username: \"\", \n            password: \"\",\n        });\n        //aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n        //por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n        //y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n        this.props.getUser(response.user)\n    })\n    .catch(error => {\n      this.setState({\n        username: username,\n        password: password,\n        error: true\n      });\n    })\n  }\n\n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n      \n\n  render() {\n    return(\n      <div className=\"auth\">\n        <h3>Signup</h3>\n\n        <form onSubmit={this.handleFormSubmit}>\n            <input placeholder=\"Username\" type=\"text\" name=\"username\" value={this.state.username} onChange={ e => this.handleChange(e)}/>\n          \n            <input placeholder=\"Password\" type=\"password\" name=\"password\" value={this.state.password} onChange={ e => this.handleChange(e)} />\n          \n          <input type=\"submit\" value=\"Sign up\" />\n        </form>\n\n        <h1>{this.state.error ? 'Error' : ''}</h1>\n      </div>\n    )\n  }\n}\n\nexport default Signup;"]},"metadata":{},"sourceType":"module"}